-- Custom repository for cardano haskell packages, see CONTRIBUTING for more
repository cardano-haskell-packages
  url: https://chap.intersectmbo.org/
  secure: True
  root-keys:
    3e0cce471cf09815f930210f7827266fd09045445d65923e6d0238a6cd15126f
    443abb7fb497a134c343faf52f0b659bd7999bc06b7f63fa76dc99d631f9bea1
    a86a1f6ce86c449c46666bda44268677abf29b5b2d2eb5ec7af903ec2f117a82
    bcec67e8e99cabfa7764d75ad9b158d72bfacf70ca1d0ec8bc6b4406d1bf8413
    c00aae8461a256275598500ea0e187588c35a5d5d7454fb57eac18d9edb86a56
    d4a35cd3121aa00d18544bb0ac01c3e1691d618f462c46129271bccf39f7e8ee

-- While using SRPs one can obtain the `--sha256` value for a package
-- by first setting it to some random value and letting the tooling
-- tell you what it should be, for example, using `nix develop` will
-- throw an error with the correct value to use or alternatively
-- you can run `nix-prefetch-url <url> --unpack`,
-- e.g.: `nix-prefetch-url https://github.com/intersectmbo/formal-ledger-specifications/archive/841942c68993857fd40ca35cd62258cf82d160a5.zip --unpack`
-- This might even be preferable, since this will give you the full hash
-- rather than a shortened one.
source-repository-package
  type: git
  location: https://github.com/IntersectMBO/formal-ledger-specifications.git
  subdir: generated
  tag: 58f4b078a7e0df0c49264b78090122e75679585f
  --sha256: sha256-iEqucpja/0/5Tvnjr2drFlz58f3x3kUpInVjZfcePBQ=
-- NOTE: If you would like to update the above, look for the `MAlonzo-code`
-- branch in the `formal-ledger-specifications` repo and copy the SHA of
-- the commit you need. The `MAlonzo-code` branch functions like an alternative
-- `master / main` branch for the generated code, see the details here:
-- https://github.com/IntersectMBO/formal-ledger-specifications/pull/530
-- If you are working on something in `formal-ledger-specifications`
-- and would like to see how they reflect here, just open a PR / draft PR
-- in `formal-ledger-specifications` for your branch and that will
-- automatically create a branch for the generated code that you can try here
-- by editing the above SRP.
-- Once your changes are merged in `formal-ledger-specifications`, the branch
-- for the generated code will be merged into `MAlonzo-code` automatically.
-- Before merging a PR in `cardano-ledger`, make sure that the above SRP
-- points to a commit in `MAlonzo-code` if you were fiddling with the SRP
-- as part of your PR.

index-state:
  -- Bump this if you need newer packages from Hackage
  , hackage.haskell.org 2024-08-05T20:07:24Z
  -- Bump this if you need newer packages from CHaP
  , cardano-haskell-packages 2024-08-07T21:42:21Z

packages:
  eras/allegra/impl
  eras/alonzo/impl
  eras/alonzo/test-suite
  eras/babbage/impl
  eras/babbage/test-suite
  eras/conway/impl
  eras/conway/test-suite
  eras/mary/impl
  eras/shelley/impl
  eras/shelley/test-suite
  eras/shelley-ma/test-suite
  libs/cardano-ledger-api
  libs/cardano-ledger-core
  libs/cardano-ledger-binary
  libs/cardano-protocol-tpraos
  libs/non-integral
  libs/small-steps
  libs/cardano-data
  libs/set-algebra
  libs/vector-map

  -- == Byron era ==
  -- byron-spec-chain:
  eras/byron/chain/executable-spec
  -- byron-spec-ledger:
  eras/byron/ledger/executable-spec
  -- cardano-ledger-byron:
  eras/byron/ledger/impl
  -- cardano-ledger-byron-test:
  eras/byron/ledger/impl/test
  -- cardano-crypto-wrapper:
  eras/byron/crypto
  -- cardano-crypto-test:
  eras/byron/crypto/test

  -- Packages used during development and are not released to CHaPs:
  libs/cardano-ledger-conformance
  libs/cardano-ledger-test
  libs/plutus-preprocessor
  libs/ledger-state
  libs/constrained-generators

program-options
  ghc-options: -Werror

package plutus-preprocessor
  haddock-options: "--optghc=-fplugin-opt PlutusTx.Plugin:defer-errors"

package cardano-ledger-core
  flags: +asserts

package cardano-ledger-shelley
  flags: +asserts

package cardano-ledger-mary
  flags: +asserts

package cardano-ledger-conway
  flags: +asserts

-- Always write GHC env files, because they are needed for repl and by the doctests.
write-ghc-environment-files: always

-- Always build tests and benchmarks.
tests: true
benchmarks: true

-- The only sensible test display option
test-show-details: streaming
