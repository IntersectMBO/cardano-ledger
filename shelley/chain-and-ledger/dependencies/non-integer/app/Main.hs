{-# LANGUAGE EmptyDataDecls #-}

module Main where

import           Criterion.Main
import           System.IO                (isEOF)

import           Control.Exception        (evaluate)
import           Control.Monad            (forM)
import           NonIntegral

import qualified Data.Fixed               as FP

data E34

instance FP.HasResolution E34 where
  resolution _ = 10000000000000000000000000000000000

type Digits34 = FP.Fixed E34

type FixedPoint = Digits34

precision :: FixedPoint
precision = 10000000000000000000000000000000000

epsilon :: FixedPoint
epsilon = 100000000000000000

doTestsFromStdin :: IO ()
doTestsFromStdin = do
  b <- isEOF
  if b
    then return ()
    else do
      line <- getLine
      let base = read (takeWhile (/= ' ') line) :: FixedPoint
      let exponent = read (tail $ dropWhile (/= ' ') line) :: FixedPoint
      putStrLn $
        show ((base / precision) *** (exponent / precision)) ++
        " " ++ show (exp' (base / precision))
      doTestsFromStdin

benchmark :: [(Int, FixedPoint, FixedPoint)]
benchmark =
  [ ( 0, 13.2537787738760641755376502809034752, 45.9650132023219801122678173987766272)
  , ( 1, 21.9959186212478939576566810908033024, 67.9864716740685320723722320893444096)
  , ( 2, 93.5692896226738780239819442090934272, 52.0416372022747454755038068918452224)
  , ( 3, 3.5572110464847438658621000753610752, 53.0700193141057148796603927067885568)
  , ( 4, 0.8698186061599178016839257995345920, 6.7842237262567550912485920681754624)
  , ( 5, 68.7772712409045218677237524992098304, 93.1436494969692729683863493865897984)
  , ( 6, 52.7928777759906053349458218592501760, 65.4918962180522563964940116488617984)
  , ( 7, 70.2190594499176628519353723293532160, 76.3198039998634025568863980865191936)
  , ( 8, 4.8464513386311943174129704947941376, 32.9234226160007695845405254423150592)
  , ( 9, 75.7410486132585916475077118859935744, 36.6338670891576770364321402200260608)
  , ( 10, 98.3550286321034279316900414304026624, 75.4355835205582835881179333959614464)
  , ( 11, 7.3685882820231065878204334016036864, 88.5707128815841388784728276161527808)
  , ( 12, 43.7411405515639515926670748791341056, 47.8731765118408124102889574557024256)
  , ( 13, 27.5906840076478324717730408223997952, 16.7507200194652839689498413431259136)
  , ( 14, 89.8656286732214356920544015218114560, 6.1564327533513653582490711808278528)
  , ( 15, 50.5522894934610842134489594628931584, 32.0032941085453044152882062648410112)
  , ( 16, 49.4976685206683080322997356437962752, 9.1732894580629795064426413072318464)
  , ( 17, 7.4749075222416952086275606162964480, 38.5142147968053562835285961001140224)
  , ( 18, 91.4817442071026505531811954721554432, 46.5445824948437078206920528205185024)
  , ( 19, 5.1083983708707576175800161188970496, 77.1204547001944331932077135063154688)
  , ( 20, 12.6365375577727370437324925436952576, 68.9455301054184269138551670428401664)
  , ( 21, 63.0543418124007866926297675984797696, 72.6411998660791682802467003426668544)
  , ( 22, 88.9572214067262526845885219646472192, 30.7321830882615579596165570289991680)
  , ( 23, 51.4273702178878126522261227247239168, 84.6981560313644065403306525232988160)
  , ( 24, 84.2510639570235198523653107629424640, 41.6394615428571792155199886898233344)
  , ( 25, 46.8917368501955056412849664233046016, 17.9327703682644204038452725428518912)
  , ( 26, 57.2654810708495527940453948329033728, 3.4053754301980716094514512284090368)
  , ( 27, 49.9480119058587559718046117430034432, 74.9292651237894527529873173079130112)
  , ( 28, 89.1737481571761229349640790133964800, 84.3039612731397230566496953287311360)
  , ( 29, 21.3751514550890100882157511395770368, 13.142726180309635244407016807569817)
  ]

leaderTest :: [(FixedPoint, FixedPoint)]
leaderTest =
  [
    (0.8976665211035411703124553958948864, 0.0606582711007603145244895640289280)
  , (0.5716976452274246673714149660295168, 0.0331504489265505234519324656402432)
  , (0.7065648209493466791499936332513280, 0.0191904944750586084629366710468608)
  , (0.6163887307023640265975933760962560, 0.0009789115765377905506587582136320)
  , (0.8287250814277211883261694752849920, 0.0818294354737262242315256763252736)
  , (0.6296088792688894580304263956660224, 0.2136254446486856645093028182097920)
  , (0.0043534976530209208384197958303744, 0.0800088928081371273822004693696512)
  , (0.0064410557720643207061256238268416, 0.5185265748729378110381531598946304)
  , (0.0077974162429930188849042033737728, 0.0669355530388412925139403990368256)
  , (0.0475597669349733145505167025635328, 0.3283014027373916529841907104219136)]

f :: FixedPoint
f = 1 / 10

leaderComputation :: (FixedPoint, FixedPoint) -> CompareResult
leaderComputation (sigma, p) = taylorExpCmp 3 (1/q) (-sigma*c')
  where c = 1 - f
        c' = ln' c
        q = 1 - p

leader' :: (FixedPoint, FixedPoint) -> CompareResult
leader' (invQ, negAlpha) = taylorExpCmp 3 invQ negAlpha

main :: IO ()
main = do
  -- precomputed <-
  --   forM benchmark $ \(i, x, y) -> do
  --     c <- evaluate $ ln' x
  --     return (i, c, y)
  -- defaultMain
  --   [ bgroup
  --       "***"
  --       [bench (show i) $ whnf (uncurry (***)) (x, y) | (i, x, y) <- benchmark]
  --   , bgroup
  --       "constant"
  --       [ bench (show i) $ whnf (\(c, y) -> exp' (y * c)) (c, y)
  --       | (i, c, y) <- precomputed
  --       ]
  --   ]
  precomputedLeader <-
    forM leaderTest $ \(sigma, p) -> do
      let q = 1 - p
      let c = 1 - f
      let c' = ln' c
      return (1/q, (-sigma * c'))
  precomputedLeader' <-
    forM leaderTest $ \(sigma, p) -> do
      c <- evaluate $ ln' (1 - f)
      return (p, sigma, c)

  defaultMain
    [
      bgroup
      "taylorCmp"
      [bench "cmp" $ whnf leader' (invQ, negAlpha)
      | (invQ, negAlpha) <- precomputedLeader
      ]
    , bgroup
      "partial pre-computation"
      [bench "exp(alpha*c)" $ whnf (\(p', s', c') -> p' < 1 - exp' (s' * c')) (p, sigma, c)
      | (p, sigma, c) <- precomputedLeader'
      ]
    , bgroup
      "full calculation"
      [bench "cmp" $ whnf (\(s, p') -> p' < 1 - ((1 - f) *** s)) (sigma, p)
      | (sigma, p) <- leaderTest
      ]
    ]
  print $ map leaderComputation leaderTest
